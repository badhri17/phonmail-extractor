#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 22, 2020 03:04:57 PM +03  platform: Windows NT
import platform
import pyperclip
import sys
import os
import phonmail
import threading
from tkinter import messagebox
from tkinter import filedialog

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
import Phonmail_extractor_app_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Phonmail_extractor_app_support.set_Tk_var()
    top = Toplevel1(root)
    Phonmail_extractor_app_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel(root)
    Phonmail_extractor_app_support.set_Tk_var()
    top = Toplevel1(w)
    Phonmail_extractor_app_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

email_dict = {"gmail only":"gmail","ALL":"all","outlook only":"outlook",
        "hotmail only":"hotmail","yahoo only":"yahoo"
        } 
phone_dict = {"ALL":"all","USA and canada":"1","United Kingdom":"44","United Arab Emirates":"971","China":"86",
        "russia":"7","Saudi Arabia":"966","Kuwait":"965","Oman":"968","Yemen":"967"} 

lang_num = 0

class Toplevel1:

    def thread_check(self):
        self.em_num = 0
        self.ph_num = 0
        self.new_thread = threading.Thread(target=self.start, daemon=True)
        self.new_thread.start()

    def start(self):
        self.em_num = 0
        self.ph_num = 0
        self.Scrolledtext1.configure(state="normal")
        self.Scrolledtext1.delete("1.0", tk.END)
        self.output_email = ""
        self.output_phone = ""
        if Phonmail_extractor_app_support.che69.get() == 0 and Phonmail_extractor_app_support.che70.get() == 0:
            tk.messagebox.showerror(
                "error", " You have to choose at least one option  ")
            return 0
        if self.flag:
            self.input_text = self.Scrolledtext2.get('1.0', 'end-1c')
            self.input_text = "\n".join([ll.rstrip() for ll in self.input_text.splitlines() if ll.strip()])
            if not self.input_text:
                tk.messagebox.showerror("error", "nothing to extract ")
                return 0
            else:
                #self.lines_number = len(self.input_text.split("\n"))
                self.lines = self.input_text.split("\n")
        else:
            if self.file != None:
                if self.file_type == "txt":
                    self.file.seek(0)
                    self.sorted = self.file.readlines()
                else:
                    self.sorted = self.file    
                self.sorted = "".join(self.sorted)
                self.lines = self.sorted.split("\n")
        self.TProgressbar1.configure(value="0")
        pro =  email_dict[self.TCombobox1_1.get()]
        code = phone_dict[self.TCombobox1.get()]
        for i in range(len(self.lines)):

            new = phonmail.extractor(self.lines[i])
            self.output_phone = self.output_phone + new.phones(country_code= code) + "\n"
            self.output_email = self.output_email + new.emails( provider=pro) + "\n"
            self.progress = round(i / len(self.lines) * 100)
            self.TProgressbar1.configure(value=self.progress)
            
        if self.output_email.isspace() and  self.output_phone.isspace():
            self.TProgressbar1.configure(value=str("0"))
            tk.messagebox.showerror("sorry", "nothing found to display! ")
            
            return
        self.TProgressbar1.configure(value=str("100"))    
        if Phonmail_extractor_app_support.che69.get() == 1 and not self.output_email.isspace():

            self.output_email = self.output_email.strip()
            self.output_email = "\n".join([ll.rstrip() for ll in self.output_email.splitlines() if ll.strip()])
            tag_email = "          emails \n --------------------------------------- \n "
        else:
            self.output_email = " "
            tag_email = ""
        if Phonmail_extractor_app_support.che70.get() == 1 and not self.output_phone.isspace():
            self.output_phone = self.output_phone.strip()
            self.output_phone = "\n".join([ll.rstrip() for ll in self.output_phone.splitlines() if ll.strip()])
            self.ph_num = len(self.output_phone.splitlines())
            tag_phone = "\n \n          phone numbers \n --------------------------------------- \n "
        else:
            self.output_phone = " "
            tag_phone = ""
        
        self.output_email = "\n".join(
            [ll.rstrip() for ll in self.output_email.splitlines() if ll.strip()])
        self.em_num =  len(self.output_email.splitlines())  
        self.output_last = tag_email + self.output_email + tag_phone + self.output_phone
        self.Scrolledtext1.insert("1.0", self.output_last)
        self.Scrolledtext1.configure(state="disabled")
        self.you_can_save = True
        self.label_it()
        tk.messagebox.showinfo("Done", "extracting done! ")
    
    
    def label_it(self):
        self.Label2.configure(foreground = "#ffffff")
        if self.lang_help == 0:

            self.Label2.configure(text ='''{} emailes and {} phones found'''.format(self.em_num,self.ph_num))
        else:
            self.Label2.configure(text=" وجد {} ايميلات و{} هواتف ".format(self.em_num,self.ph_num))

    def cancel_start(self):
        #self.cancel = True
        self.restart_program()

    def browse(self):
        self.Scrolledtext2.delete("1.0", tk.END)
        self.Scrolledtext1.delete("1.0", tk.END)
        self.flag = False
        self.file = filedialog.askopenfile(
            mode='r', filetypes=[('text Files , word files and pdf', "*.txt .docx .pdf")])

        if self.file != None:
            self.file_location = self.file.name
            self.Entry1.delete(0, tk.END)
            self.Entry1.insert(0, self.file_location)
            self.xbutton.configure(state="active")
            self.Scrolledtext2.configure(state="disabled")
            if self.file_location.endswith(".docx"):
                self.file = Phonmail_extractor_app_support.convertDocxToText(self.file_location)
                self.file_type = "docx"
            elif self.file_location.endswith(".pdf"):
                self.file_type = "pdf"
                self.file = Phonmail_extractor_app_support.convertPdfToText(self.file_location)
            else:
                 self.file_type = "txt"             
        else:
            return 0

    def cancel_browse(self):
        self.flag = True
        self.Entry1.delete(0, tk.END)
        self.Scrolledtext2.configure(state="normal")

    def restart_program(self):

        python = sys.executable
        os.execl(python, python, * sys.argv)

    def save_file(self):
        if self.you_can_save == True:
            f = filedialog.asksaveasfile(mode='w', defaultextension=".txt", filetypes=[
                                         ('text Files', '*.txt')])
            if f is None:  # asksaveasfile return `None` if dialog closed with "cancel".
                return

            f.write(self.output_last)
            tk.messagebox.showinfo("Done", "Saved !!!! ")
        else:
            tk.messagebox.showerror("error", "Nothing to Save ")

    def copy_all(self):
        if self.you_can_save == True:
            pyperclip.copy(self.output_last)
            tk.messagebox.showinfo("Done", "copied to your clipboard")
    def disabling(self):
        if Phonmail_extractor_app_support.che70.get() == 0:

            self.TCombobox1.configure(state = "disabled")
        else:
            self.TCombobox1.configure(state = "normal")
        if Phonmail_extractor_app_support.che69.get() == 0:
            self.TCombobox1_1.configure(state = "disabled")    
        else:
            self.TCombobox1_1.configure(state = "normal")
    
    def lang_change(self):
        self.lang_help = 1
        self.sub_menu.entryconfig(1,state = "normal")
        self.sub_menu.entryconfig(0,state = "disabled")  

        self.Label1.configure(text = "المدخلات")
        self.Label1_1.configure(text = "المخرجات")
        self.Label1_3.configure(text = "أو")
        self.Checkbutton1.configure(text = "الايميلات")
        Phonmail_extractor_app_support.L3.set("الخيارات")
        Phonmail_extractor_app_support.B1.set("تصفح")
        self.Checkbutton1_5.configure(text = "ارقام الهواتف")
        self.Label1_2.configure(text = "استيراد ملف ")
        self.Button2.configure(text = " الكل نسخ ")
        self.Button2_5.configure(text = "حفظ")
        self.Button1_3.configure(text = "ابدأ" )
        self.Button1_4.configure(text = "الغاء")


        self.Label2.configure(text=''' ايميلات و {} هواتف  {} '''.format(self.em_num,self.ph_num))
        #Phonmail_extractor_app_support.check_lang2 = tk.IntVar(value = 0)    
    def lang_change2(self):
        self.lang_help = 0    
        self.sub_menu.entryconfig(0,state = "normal")
        self.sub_menu.entryconfig(1,state = "disabled")
        
        self.Label1.configure(text = "INPUT")
        self.Label1_1.configure(text = "OUTPUT")
        self.Label1_3.configure(text = "OR")
        self.Checkbutton1_5.configure(text = "Phone Numbers")
        self.Checkbutton1.configure(text = "Emails")
        self.Label1_2.configure(text = "Import a File")
        self.Button2.configure(text = "Copy OutpUt")
        self.Button2_5.configure(text = "Save")
        self.Button1_3.configure(text = "Start" )
        self.Button1_4.configure(text = "Cancel")
    
        Phonmail_extractor_app_support.L3.set("OPTIONS")
        
        Phonmail_extractor_app_support.B1.set("Browse")
        self.Label2.configure(text='''{} emailes and {} phones found'''.format(self.em_num,self.ph_num))
        #Phonmail_extractor_app_support.check_lang1 = tk.IntVar(value = 0)    
    
    def help_window(self):
        from tkinter import scrolledtext 
                # Creating tkinter main window 
        win = tk.Tk() 
        win.title("about")
        win.configure(background = "black") 
        if self.lang_help == 0:
            help_text = """ the phonmail extractor is very simple first on the input section you have two ways to put your data the first one is directly paste or write your text in the left side the second way is by putting you file(txt or docx(word) or pdf) ,the options section is where you chose which data you want to extract it (emails or phones or both )

the last section is the output you can save it as a txt or  click in the copy button to copy it all to your clipboard

that's all

if you have any  suggetions or you have found an error or a problem contact me 

bedroo_17@yahoo.com"""
        else:
            help_text = """ بسيط للغاية  phonmail مستخرج

أولاً في قسم الإدخال ، لديك طريقتان لوضع بياناتك ، الطريقة الأولى هي لصق أو كتابة النص مباشرةً في الجانب الأيسر ، والطريقة الثانية هي وضع ملف (txt أو docx (word) أو pdf) ، وقسم الخيارات هو حيث اخترت البيانات التي تريد استخراجها (رسائل البريد الإلكتروني أو الهواتف أو كليهما)

القسم الأخير هو الإخراج الذي يمكنك حفظه بتنسيق txt أو النقر فوق الزر "نسخ" لنسخه بالكامل إلى الحافظة الخاصة بك

هذا كل شئ

إذا كان لديك أي اقتراحات أو وجدت خطأ أو مشكلة اتصل بي

bedroo_17@yahoo.com"""    
        # Title Label 
        ttk.Label(win, 
                text = "How to use: ", 
                font = ("Times New Roman", 15), 
                background = 'yellow', 
                foreground = "black").grid(column = 0, 
                                            row = 0) 

        # Creating scrolled text 
        # area widget 
        text_area = scrolledtext.ScrolledText(win, 
                                            wrap = tk.WORD, 
                                            width = 40, 
                                            height = 10, 
                                            font = ("Times New Roman", 
                                                    15)) 

        text_area.grid(column = 0, pady = 10, padx = 10)

        text_area.insert("1.0",help_text)
        text_area.configure(state = "disabled")
        Button1_3 = tk.Button(win)
        Button1_3.grid(column = 0,pady = 12,padx = 15)
        Button1_3.configure(text = "Ok")
        Button1_3.configure(activebackground="#ececec")
        Button1_3.configure(activeforeground="#000000")
        Button1_3.configure(background="#ffff00")
        Button1_3.configure(disabledforeground="#a3a3a3")
        Button1_3.configure(
                    font="-family {Segoe Script} -size 9 -weight bold -slant roman -underline 0 -overstrike 0")
        Button1_3.configure(foreground="#000000")
        Button1_3.configure(highlightbackground="#d9d9d9")
        Button1_3.configure(highlightcolor="black")
        Button1_3.configure(command = win.destroy)
        win.bind("<Return>",(lambda event: win.destroy()))
        # Placing cursor in the text area 
        text_area.focus() 
        win.mainloop() 

    def open_web(self):
        import webbrowser
        webbrowser.open("https://phonmail.net")



            
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        
        self.file_type = "txt"
        self.flag = True
        self.cancel = False
        self.you_can_save = False
        self.em_num = 0
        self.ph_num = 0
        self.lang_help = 0
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.map('.', background=[
                       ('selected', _compcolor), ('active', _ana2color)])

        top.geometry("900x492+172+87")
        top.minsize(700,700)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Phonmail extractor")
        if sys.platform == "win32":
            top.iconbitmap('images\\logo.ico')
        elif sys.platform == "linux":
            photo = tk.PhotoImage(file = "images/logo.png")
            top.iconphoto(False, photo)       
        top.configure(background="#202020")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        #top.bind('<Return>', (lambda event: self.thread_check()))

        self.menubar = tk.Menu(top, font="TkMenuFont",
                               bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu1 = tk.Menu(top,
                                activebackground="#ececec",
                                activeborderwidth=1,
                                activeforeground="#000000",
                                background="#d9d9d9",
                                borderwidth=1,
                                disabledforeground="#a3a3a3",
                                foreground="#000000",
                                tearoff=0)



        self.menubar.add_cascade( menu = self.sub_menu1,label="help")
        self.sub_menu1.add_command(label = "How To Use",command = self.help_window
        )
        self.sub_menu1.add_command(label = "Our Website",command =self.open_web )    
        
        self.sub_menu = tk.Menu(top,
                                activebackground="#ececec",
                                activeborderwidth=1,
                                activeforeground="#000000",
                                background="#d9d9d9",
                                borderwidth=1,
                                disabledforeground="#a3a3a3",
                                foreground="#000000",
                                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,label = "langauge")
        self.sub_menu.add_command(label = "العربية",command = self.lang_change)
        self.sub_menu.add_command(label = "English",command = self.lang_change2,state = "disabled")                           
        self.Label1 = tk.Label(top)
        self.Label1.place(relx=-0.026, rely=-0.014, height=70, width=211)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#202020")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(
            font="-family {Segoe UI} -size 21 -weight bold -slant italic -underline 0 -overstrike 0")
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text = "INPUT")

        self.Label1_1 = tk.Label(top)
        self.Label1_1.place(relx=-0.011, rely=0.491, height=70, width=213)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#202020")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(
            font="-family {Segoe UI} -size 21 -weight bold -slant italic -underline 0 -overstrike 0")
        self.Label1_1.configure(foreground="#ffffff")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text = "OUTPUT")

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(
            relx=0.158, rely=0.645, relheight=0.201, relwidth=0.306)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="none")

        self.Label1_3 = tk.Label(top)
        self.Label1_3.place(relx=0.587, rely=0.077, height=69, width=171)
        self.Label1_3.configure(activebackground="#f9f9f9")
        self.Label1_3.configure(activeforeground="black")
        self.Label1_3.configure(background="#202020")
        self.Label1_3.configure(disabledforeground="#a3a3a3")
        self.Label1_3.configure(
            font="-family {Segoe UI} -size 17 -weight bold -slant italic -underline 0 -overstrike 0")
        self.Label1_3.configure(foreground="#ffffff")
        self.Label1_3.configure(highlightbackground="#d9d9d9")
        self.Label1_3.configure(highlightcolor="black")
        self.Label1_3.configure(text= "OR")

        self.Scrolledtext2 = ScrolledText(top)
        self.Scrolledtext2.place(
            relx=0.056, rely=0.064, relheight=0.26, relwidth=0.571)
        self.Scrolledtext2.configure(background="white")
        self.Scrolledtext2.configure(font="TkTextFont")
        self.Scrolledtext2.configure(foreground="black")
        self.Scrolledtext2.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext2.configure(highlightcolor="black")
        self.Scrolledtext2.configure(insertbackground="black")
        self.Scrolledtext2.configure(insertborderwidth="3")
        self.Scrolledtext2.configure(selectbackground="blue")
        self.Scrolledtext2.configure(selectforeground="white")
        self.Scrolledtext2.configure(wrap="none")

        self.TProgressbar1 = ttk.Progressbar(top)
        self.TProgressbar1.place(
            relx=0.011, rely=0.892, relwidth=0.982, relheight=0.0, height=22)
        self.TProgressbar1.configure(length="870")
        # self.TProgressbar1.configure(value=100)

        self.Label1_4 = tk.Label(top)
        self.Label1_4.place(relx=-0.011, rely=0.328, height=70, width=214)
        self.Label1_4.configure(activebackground="#f9f9f9")
        self.Label1_4.configure(activeforeground="black")
        self.Label1_4.configure(background="#202020")
        self.Label1_4.configure(disabledforeground="#a3a3a3")
        self.Label1_4.configure(
            font="-family {Segoe UI} -size 21 -weight bold -slant italic -underline 0 -overstrike 0")
        self.Label1_4.configure(foreground="#ffffff")
        self.Label1_4.configure(highlightbackground="#d9d9d9")
        self.Label1_4.configure(highlightcolor="black")
        self.Label1_4.configure(textvariable= Phonmail_extractor_app_support.L3)

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.813, rely=0.166, height=33, width=70)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#ffff00")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(
            font="-family {Segoe Script} -size 9 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(textvariable = Phonmail_extractor_app_support.B1)
        self.Button1.configure(command=self.browse)

        self.xbutton = tk.Button(top)
        self.xbutton.place(relx=0.943, rely=0.118, height=25, width=25)
        self.img = tk.PhotoImage(file=os.path.join("images", "xxxx.png"))
        self.tmi = self.img.subsample(10, 10)
        self.xbutton.config(image=self.tmi)
        self.xbutton.configure(background="Black")
        self.xbutton.configure(foreground="#ffffff")
        self.xbutton.configure(state="disabled")
        self.xbutton.configure(command=self.cancel_browse)
        #self.xbutton.configure(height=30, width=30)
        # self.xbutton.pack()

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.745, rely=0.118, height=24, relwidth=0.181)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="blue")
        self.Entry1.configure(selectforeground="white")

        self.Checkbutton1 = tk.Checkbutton(top)
        self.Checkbutton1.place(relx=0.05, rely=0.442,
                                relheight=0.036, relwidth=0.078)
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(background="#202020")
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#ffffff")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="#ffffff")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#400040")
        self.Checkbutton1.configure(text='''Emailes''')
        self.Checkbutton1.configure(variable=Phonmail_extractor_app_support.che69)
        self.Checkbutton1.configure(command = self.disabling)

        self.Checkbutton1_5 = tk.Checkbutton(top)
        self.Checkbutton1_5.place(
            relx=0.217, rely=0.442, relheight=0.038, relwidth=0.199)
        self.Checkbutton1_5.configure(activebackground="#ececec")
        self.Checkbutton1_5.configure(activeforeground="#000000")
        self.Checkbutton1_5.configure(background="#202020")
        self.Checkbutton1_5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_5.configure(foreground="#ffffff")
        self.Checkbutton1_5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_5.configure(highlightcolor="#ffffff")
        self.Checkbutton1_5.configure(justify='left')
        self.Checkbutton1_5.configure(selectcolor="#400040")
        self.Checkbutton1_5.configure(text='''Phone Numbers''')
        self.Checkbutton1_5.configure(
            variable=Phonmail_extractor_app_support.che70)
        self.Checkbutton1_5.configure(command = self.disabling)    

        self.Label1_2 = tk.Label(top)
        self.Label1_2.place(relx=0.717, rely=0.043, height=53, width=216)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#202020")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(
            font="-family {Segoe UI} -size 17 -weight bold -slant italic -underline 0 -overstrike 0")
        self.Label1_2.configure(foreground="#ffffff")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''import a file''')

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.824, rely=0.632, height=43, width=126)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#ffff00")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(
            font="-family {Segoe Script} -size 9 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Copy Output ''')
        self.Button2.configure(command=self.copy_all)

        self.Button2_5 = tk.Button(top)
        self.Button2_5.place(relx=0.824, rely=0.76, height=43, width=126)
        self.Button2_5.configure(activebackground="#ececec")
        self.Button2_5.configure(activeforeground="#000000")
        self.Button2_5.configure(background="#ffff00")
        self.Button2_5.configure(disabledforeground="#a3a3a3")
        self.Button2_5.configure(
            font="-family {Segoe Script} -size 9 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Button2_5.configure(foreground="#000000")
        self.Button2_5.configure(highlightbackground="#d9d9d9")
        self.Button2_5.configure(highlightcolor="black")
        self.Button2_5.configure(pady="0")
        self.Button2_5.configure(text='''Save''')
        self.Button2_5.configure(command=self.save_file)

        self.Button1_3 = tk.Button(top)
        self.Button1_3.place(relx=0.801, rely=0.944, height=30, width=98)
        self.Button1_3.configure(activebackground="#ececec")
        self.Button1_3.configure(activeforeground="#000000")
        self.Button1_3.configure(background="#ffff00")
        self.Button1_3.configure(disabledforeground="#a3a3a3")
        self.Button1_3.configure(
            font="-family {Segoe Script} -size 9 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Button1_3.configure(foreground="#000000")
        self.Button1_3.configure(highlightbackground="#d9d9d9")
        self.Button1_3.configure(highlightcolor="black")
        self.Button1_3.configure(pady="0")
        self.Button1_3.configure(text='''Start''')
        self.Button1_3.configure(command=self.thread_check)
        #self.Button1_3.bind('<Enter>',lambda e:Phonmail_extractor_app_support.xxx(e))

        self.Button1_4 = tk.Button(top)
        self.Button1_4.place(relx=0.619, rely=0.944, height=30, width=98)
        self.Button1_4.configure(activebackground="#ececec")
        self.Button1_4.configure(activeforeground="#000000")
        self.Button1_4.configure(background="#ffff00")
        self.Button1_4.configure(disabledforeground="#a3a3a3")
        self.Button1_4.configure(
            font="-family {Segoe Script} -size 9 -weight bold -slant roman -underline 0 -overstrike 0")
        self.Button1_4.configure(foreground="#000000")
        self.Button1_4.configure(highlightbackground="#d9d9d9")
        self.Button1_4.configure(highlightcolor="black")
        self.Button1_4.configure(pady="0")
        self.Button1_4.configure(text='''Cancel''')
        self.Button1_4.configure(command=self.cancel_start)

        self.TCombobox1 = ttk.Combobox(top)
        self.TCombobox1.place(relx=0.269, rely=0.484,
                              relheight=0.03, relwidth=0.102)
        self.TCombobox1.configure(
            textvariable=Phonmail_extractor_app_support.combobox)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.configure(value = ["ALL","USA and canada","United Kingdom","United Arab Emirates","China","russia","Saudi Arabia","Kuwait","Oman","Yemen"],state = "readonly")
        self.TCombobox1.configure(state = "normal")    
        self.TCombobox1.current(0)
        self.TCombobox1_1 = ttk.Combobox(top)
        self.TCombobox1_1.place(relx=0.035, rely=0.484,
                                relheight=0.03, relwidth=0.102)
        self.TCombobox1_1.configure(
            textvariable=Phonmail_extractor_app_support.combobox2)
        self.TCombobox1_1.configure(takefocus="")
        self.TCombobox1_1.configure(value = ["ALL","gmail only","outlook only","hotmail only","yahoo only"],state = "readonly")
        self.TCombobox1_1.configure(state = "normal")
        self.TCombobox1_1.current(0)

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.149, rely=0.854, height=26, width=288)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#202020")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="black")
        self.Label2.configure(text='''{} emailes and {} phones found'''.format(self.em_num,self.ph_num))


        self.Labelx = tk.Label(top)
        self.Labelx.place(relx=0.099, rely=0.934, height=40, width=90)
        self.Labelx.configure(activebackground="#f9f9f9")
        self.Labelx.configure(activeforeground="black")
        self.Labelx.configure(background="#202020")
        self.Labelx.configure(disabledforeground="#a3a3a3")
        self.Labelx.configure(
            font="-family {Segoe UI} -size 9 -weight bold -slant italic -underline 0 -overstrike 0")
        self.Labelx.configure(foreground="yellow")
        self.Labelx.configure(highlightbackground="#d9d9d9")
        self.Labelx.configure(highlightcolor="black")
        self.Labelx.configure(text = " by bedroo17")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind(
            '<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>',
                       lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
